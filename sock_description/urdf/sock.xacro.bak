<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="sock">
	<xacro:property name="length" value="0.173"/>
	<xacro:property name="width" value="0.080"/>
	<xacro:property name="height" value="0.050"/>

	<material name="color1">
		<color rgba="0 0.9 0 1"/>
	</material>

	<material name="color2">
		<color rgba="0 0 1 1"/>
	</material>
	<link name="base_link">
		<visual>
			<geometry>
				<box size="${length} ${width} ${height}"/>
			</geometry>
			<origin rpy="0 0 0" xyz="0 0 0.032"/>
			<material name="color1"/>
		</visual>
		<collision>
			<geometry>
				<box size="${length} ${width} ${height}"/>
			</geometry>
			<origin rpy="0 0 0" xyz="0 0 0.032"/>
		</collision>
		<inertial>
			<mass value="0.300"/>
			<inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
		</inertial>
	</link>

	<gazebo reference="base_link">
		<material>Gazebo/RedBright</material>
	</gazebo>

	<link name="left_wheel">
		<visual>
			<geometry>
				<cylinder length="0.018" radius="0.026"/>
			</geometry>
			<origin rpy="1.57075 0 0" xyz="0 0.0495 0.0"/>
			<material name="color2"/>
		</visual>

		<collision>
			<geometry>
				<cylinder length="0.018" radius="0.026"/>
			</geometry>
			<origin rpy="1.57075 0 0" xyz="0 0.0495 0.0"/>
		</collision>

		<inertial>
			<mass value="0.075"/>
			<inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
		</inertial>
	</link>

	<gazebo reference="left_wheel">
		<material>Gazebo/Orange</material>
	</gazebo>

	<link name="right_wheel">
		<visual>
			<geometry>
				<cylinder length="0.018" radius="0.026"/>
			</geometry>
			<origin rpy="1.57075 0 0" xyz="0 -0.0495 0.0"/>
			<material name="color2"/>
		</visual>
		<collision>
			<geometry>
				<cylinder length="0.018" radius="0.026"/>
			</geometry>
			<origin rpy="1.57075 0 0" xyz="0 -0.0495 0.0"/>
		</collision>
		<inertial>
			<mass value="0.075"/>
			<inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
		</inertial>
	</link>

	<gazebo reference="right_wheel">
		<material>Gazebo/Orange</material>
	</gazebo>

	<link name="front_ball">
		<visual>
			<geometry>
				<sphere radius="0.026"/>
			</geometry>
			<origin rpy="0 0 0" xyz="0.0605 0 0.0261"/>
			<material name="color1"/>
		</visual>
		<collision>
			<geometry>
				<sphere radius="0.026"/>
			</geometry>
			<origin rpy="0 0 0" xyz="0.0605 0 0.0261"/>
		</collision>
		<inertial>
			<mass value="0.05"/>
			<inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
		</inertial>
	</link>


	<link name="back_ball">
		<visual>
			<geometry>
				<sphere radius="0.026"/>
			</geometry>
			<origin rpy="0 0 0" xyz="-0.0605 0 0.0261"/>
			<material name="color1"/>
		</visual>
		<collision>
			<geometry>
				<sphere radius="0.026"/>
			</geometry>
			<origin rpy="0 0 0" xyz="-0.0605 0 0.0261"/>
		</collision>
		<inertial>
			<mass value="0.05"/>
			<inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
		</inertial>
	</link>

	<!-- Camera -->
	<xacro:property name="x" value="0"/>
	<xacro:property name="y" value="0"/>
	<xacro:property name="z" value="0"/>

	<xacro:property name="r" value="0"/>
	<xacro:property name="p" value="0"/>
	<xacro:property name="y" value="0"/>

	<joint name="camera_joint" type="fixed">
		<axis xyz="1 0 0"/>
		<origin xyz="${length/2-0.01} 0 ${height+0.025}" rpy="${r} ${p} ${y}"/>
		<parent link="base_link"/>
		<child link="camera_link"/>_
	</joint>

	<link name="camera_link">
		<collision>
			<origin xyz="${x} ${y} ${z}" rpy="${r} ${p} ${y}"/>
			<geometry>
				<box size="0.02 0.06 0.03"/>
			</geometry>
		</collision>
		<visual>
			<origin xyz="${x} ${y} ${z}" rpy="${r} ${p} ${y}"/>
			<geometry>
				<box size="0.02 0.06 0.03"/>
			</geometry>
			<material name="blue"/>
		</visual>
		<inertial>
			<mass value="1e-5"/>
			<origin xyz="${x} ${y} ${z}" rpy="${r} ${p} ${y}"/>
			<inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
		</inertial>
	</link> 
	<!--To get the pointclound orientation right in rviz, you need to make an extra link for the plugin. Source: https://answers.ros.org/question/218395/libgazebo_ros_openni_kinectso-depth-pointcloud-wrong-tf/. It can be an empty link (here:camera_depth_link) and then you can change the orientation of the pointcloud in the joint that connects the original camera_link to the extra camera_depth_link. -->

	<joint name="camera_depth_joint" type="fixed">
		<origin xyz="0 0 ${height+0.025}" rpy="1.5708 3.1415 1.5708"/>
		<parent link="camera_link"/>
		<child link="camera_depth_link"/>
	</joint>

	<link name="camera_depth_link">
	</link>

	<!-- Depth camera details, source: https://answers.ros.org/question/301164/adding-a-3d-camera-to-a-robot-armur5-in-urdf-for-rviz-and-gazebo/-->
	<gazebo reference="camera_link">
		<sensor type="depth" name="elenb">
			<always_on>true</always_on>
			<visualize>true</visualize>
			<camera>
				<horizontal_fov>1.047</horizontal_fov>
				<image>
					<width>640</width>
					<height>480</height>
					<format>R8G8B8</format>
				</image>
				<depth_camera>

				</depth_camera>
				<clip>
					<near>0.001</near>
					<far>100</far>
				</clip>
			</camera>
			<plugin name="camera_controller" filename="libgazebo_ros_openni_kinect.so">
				<baseline>0.2</baseline>
				<alwaysOn>true</alwaysOn>
				<updateRate>10.0</updateRate>
				<cameraName>elenb</cameraName>
				<frameName>camera_depth_link</frameName> <!--extra link made for the depth camera -->
				<imageTopicName>rgb/image_raw</imageTopicName>
				<depthImageTopicName>depth/image_raw</depthImageTopicName>
				<pointCloudTopicName>depth/points</pointCloudTopicName>
				<cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
				<depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
				<pointCloudCutoff>0.4</pointCloudCutoff>
				<hackBaseline>0.07</hackBaseline>
				<distortionK1>0.0</distortionK1>
				<distortionK2>0.0</distortionK2>
				<distortionK3>0.0</distortionK3>
				<distortionT1>0.0</distortionT1>
				<distortionT2>0.0</distortionT2>
				<CxPrime>0.0</CxPrime>
				<Cx>0.0</Cx>
				<Cy>0.0</Cy>
				<focalLength>0.0</focalLength>
			</plugin>
		</sensor>
	</gazebo>

	<!--Lidar-->
	<joint name="lidar_joint" type="fixed">
		<origin xyz="0 0 ${height+0.025}" rpy="0 0 0"/>
		<parent link="camera_link"/>
		<child link="lidar_link"/>
	</joint>

	<link name="lidar_link">
	</link>
	<!-- hokuyo -->
	<gazebo reference="camera_link">
		<sensor type="gpu_ray" name="head_hokuyo_sensor">
			<pose>0 0 0 0 0 0</pose>
			<visualize>false</visualize>
			<update_rate>40</update_rate>
			<ray>
				<scan>
					<horizontal>
						<samples>720</samples>
						<resolution>1</resolution>
						<min_angle>-1.570796</min_angle>
						<max_angle>1.570796</max_angle>
					</horizontal>
				</scan>
				<range>
					<min>0.10</min>
					<max>30.0</max>
					<resolution>0.01</resolution>
				</range>
				<noise>
					<type>gaussian</type>
					<!-- Noise parameters based on published spec for Hokuyo laser
	       achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
	       stddev of 0.01m will put 99.7% of samples within 0.03m of the true
	       reading. -->
	  <mean>0.0</mean>
	  <stddev>0.01</stddev>
  </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so">
	      <topicName>/elenb/laser/scan</topicName>
	      <frameName>lidar_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <joint name="base_to_left_wheel" type="continuous">
	  <parent link="base_link"/>
	  <child link="left_wheel"/>
	  <axis xyz="0 1 0"/>
	  <origin xyz="0 0 0.026"/>
  </joint>

  <transmission name="base_to_left_wheel">
	  <type>transmission_interface/SimpleTransmission</type>
	  <actuator name="$base_to_left_wheel">
		  <mechanicalReduction>1</mechanicalReduction>
	  </actuator>
	  <joint name="base_to_left_wheel">
		  <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
	  </joint>
  </transmission>

  <gazebo reference="base_to_left_wheel">
	  <mu1 value="200.0"/>
	  <mu2 value="100.0"/>
	  <kp value="10000000.0"/>
	  <kd value="1.0"/>
	  <material>Gazebo/Grey</material>
  </gazebo>


  <joint name="base_to_right_wheel" type="continuous">
	  <parent link="base_link"/>
	  <child link="right_wheel"/>
	  <axis xyz="0 1 0"/>
	  <origin xyz="0 0 0.026"/>
  </joint>

  <transmission name="base_to_right_wheel">
	  <type>transmission_interface/SimpleTransmission</type>
	  <actuator name="$base_to_right_wheel">
		  <mechanicalReduction>1</mechanicalReduction>
	  </actuator>
	  <joint name="base_to_right_wheel">
		  <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
	  </joint>
  </transmission>

  <gazebo reference="base_to_right_wheel">
	  <mu1 value="200.0"/>
	  <mu2 value="100.0"/>
	  <kp value="10000000.0"/>
	  <kd value="1.0"/>
	  <material>Gazebo/Grey</material>
  </gazebo>

  <joint name="base_to_front_ball" type="fixed">
	  <parent link="base_link"/>
	  <child link="front_ball"/>
	  <dynamics damping="0.0" friction="0.0"/>
  </joint>
  <gazebo reference="base_to_front_ball">
	  <mu1 value="0.0"/>
	  <mu2 value="0.0"/>
	  <kp value="10000.0"/>
	  <kd value="1.0"/>
	  <material>Gazebo/Grey</material>
  </gazebo>

  <joint name="base_to_back_ball" type="fixed">
	  <parent link="base_link"/>
	  <child link="back_ball"/>
	  <dynamics damping="0.0" friction="0.0"/>
  </joint>

  <gazebo reference="base_to_back_ball">
	  <mu1 value="0.0"/>
	  <mu2 value="0.0"/>
	  <kp value="10000.0"/>
	  <kd value="1.0"/>
	  <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo>
	  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
		  <robotNamespace>/</robotNamespace>
	  </plugin>
  </gazebo>
</robot>
